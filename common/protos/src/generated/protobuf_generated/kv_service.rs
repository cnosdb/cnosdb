// This file is @generated by prost-build.
/// --------------------------------------------------------------------
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PingRequest {
    #[prost(uint64, tag = "1")]
    pub version: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub body: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PingResponse {
    #[prost(uint64, tag = "1")]
    pub version: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub body: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Meta {
    #[prost(string, tag = "1")]
    pub tenant: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub user: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub password: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WritePointsResponse {
    #[prost(uint64, tag = "1")]
    pub points_number: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchBytesResponse {
    #[prost(int32, tag = "1")]
    pub code: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
/// --------------------------------------------------------------------
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteDataRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "2")]
    pub precision: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DropTableRequest {
    #[prost(string, tag = "1")]
    pub db: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub table: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DropColumnRequest {
    #[prost(string, tag = "1")]
    pub db: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub table: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub column: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSetValue {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub value: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTagsRequest {
    #[prost(string, tag = "1")]
    pub db: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub new_tags: ::prost::alloc::vec::Vec<UpdateSetValue>,
    #[prost(bytes = "vec", repeated, tag = "3")]
    pub matched_series: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, tag = "4")]
    pub dry_run: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteFromTableRequest {
    #[prost(string, tag = "1")]
    pub tenant: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub database: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub table: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub predicate: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "5")]
    pub vnode_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RaftWriteCommand {
    #[prost(string, tag = "1")]
    pub tenant: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub db_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub replica_id: u32,
    #[prost(oneof = "raft_write_command::Command", tags = "4, 5, 6, 7, 8")]
    pub command: ::core::option::Option<raft_write_command::Command>,
}
/// Nested message and enum types in `RaftWriteCommand`.
pub mod raft_write_command {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        #[prost(message, tag = "4")]
        WriteData(super::WriteDataRequest),
        #[prost(message, tag = "5")]
        DropTable(super::DropTableRequest),
        #[prost(message, tag = "6")]
        DropColumn(super::DropColumnRequest),
        #[prost(message, tag = "7")]
        DeleteFromTable(super::DeleteFromTableRequest),
        #[prost(message, tag = "8")]
        UpdateTags(super::UpdateTagsRequest),
    }
}
/// --------------------------------------------------------------------
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompactVnodeRequest {
    #[prost(uint32, repeated, tag = "1")]
    pub vnode_ids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FetchChecksumRequest {
    #[prost(uint32, tag = "1")]
    pub vnode_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenRaftNodeRequest {
    #[prost(string, tag = "1")]
    pub tenant: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub db_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub vnode_id: u32,
    #[prost(uint32, tag = "4")]
    pub replica_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DropRaftNodeRequest {
    #[prost(string, tag = "1")]
    pub tenant: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub db_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub vnode_id: u32,
    #[prost(uint32, tag = "4")]
    pub replica_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddRaftFollowerRequest {
    #[prost(string, tag = "1")]
    pub db_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub replica_id: u32,
    #[prost(uint64, tag = "3")]
    pub follower_nid: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveRaftNodeRequest {
    #[prost(string, tag = "1")]
    pub db_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub replica_id: u32,
    #[prost(uint32, tag = "3")]
    pub vnode_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DestoryRaftGroupRequest {
    #[prost(string, tag = "1")]
    pub db_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub replica_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PromoteLeaderRequest {
    #[prost(string, tag = "1")]
    pub db_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub new_leader_id: u32,
    #[prost(uint32, tag = "3")]
    pub replica_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LearnerToFollowerRequest {
    #[prost(string, tag = "1")]
    pub db_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub replica_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuildRaftGroupRequest {
    #[prost(string, tag = "1")]
    pub db_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub replica_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdminCommand {
    #[prost(string, tag = "1")]
    pub tenant: ::prost::alloc::string::String,
    #[prost(oneof = "admin_command::Command", tags = "2, 3, 4, 5, 6, 7, 8, 9, 10, 11")]
    pub command: ::core::option::Option<admin_command::Command>,
}
/// Nested message and enum types in `AdminCommand`.
pub mod admin_command {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        #[prost(message, tag = "2")]
        CompactVnode(super::CompactVnodeRequest),
        #[prost(message, tag = "3")]
        OpenRaftNode(super::OpenRaftNodeRequest),
        #[prost(message, tag = "4")]
        DropRaftNode(super::DropRaftNodeRequest),
        #[prost(message, tag = "5")]
        FetchChecksum(super::FetchChecksumRequest),
        #[prost(message, tag = "6")]
        AddRaftFollower(super::AddRaftFollowerRequest),
        #[prost(message, tag = "7")]
        RemoveRaftNode(super::RemoveRaftNodeRequest),
        #[prost(message, tag = "8")]
        DestoryRaftGroup(super::DestoryRaftGroupRequest),
        #[prost(message, tag = "9")]
        PromoteLeader(super::PromoteLeaderRequest),
        #[prost(message, tag = "10")]
        LearnerToFollower(super::LearnerToFollowerRequest),
        #[prost(message, tag = "11")]
        BuildRaftGroup(super::BuildRaftGroupRequest),
    }
}
/// --------------------------------------------------------------------
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DownloadFileRequest {
    #[prost(string, tag = "1")]
    pub filename: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRecordBatchRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub args: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub expr: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub aggs: ::prost::alloc::vec::Vec<u8>,
}
/// Generated client implementations.
pub mod tskv_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// --------------------------------------------------------------------
    #[derive(Debug, Clone)]
    pub struct TskvServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TskvServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TskvServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TskvServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TskvServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn ping(
            &mut self,
            request: impl tonic::IntoRequest<super::PingRequest>,
        ) -> std::result::Result<tonic::Response<super::PingResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kv_service.TSKVService/Ping",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("kv_service.TSKVService", "Ping"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn download_file(
            &mut self,
            request: impl tonic::IntoRequest<super::DownloadFileRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::BatchBytesResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kv_service.TSKVService/DownloadFile",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("kv_service.TSKVService", "DownloadFile"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn tag_scan(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRecordBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::BatchBytesResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kv_service.TSKVService/TagScan",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("kv_service.TSKVService", "TagScan"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn query_record_batch(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRecordBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::BatchBytesResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kv_service.TSKVService/QueryRecordBatch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("kv_service.TSKVService", "QueryRecordBatch"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn raft_write(
            &mut self,
            request: impl tonic::IntoRequest<super::RaftWriteCommand>,
        ) -> std::result::Result<
            tonic::Response<super::BatchBytesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kv_service.TSKVService/RaftWrite",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("kv_service.TSKVService", "RaftWrite"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn admin_request(
            &mut self,
            request: impl tonic::IntoRequest<super::AdminCommand>,
        ) -> std::result::Result<
            tonic::Response<super::BatchBytesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kv_service.TSKVService/AdminRequest",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("kv_service.TSKVService", "AdminRequest"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod tskv_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TskvServiceServer.
    #[async_trait]
    pub trait TskvService: std::marker::Send + std::marker::Sync + 'static {
        async fn ping(
            &self,
            request: tonic::Request<super::PingRequest>,
        ) -> std::result::Result<tonic::Response<super::PingResponse>, tonic::Status>;
        /// Server streaming response type for the DownloadFile method.
        type DownloadFileStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::BatchBytesResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn download_file(
            &self,
            request: tonic::Request<super::DownloadFileRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::DownloadFileStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the TagScan method.
        type TagScanStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::BatchBytesResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn tag_scan(
            &self,
            request: tonic::Request<super::QueryRecordBatchRequest>,
        ) -> std::result::Result<tonic::Response<Self::TagScanStream>, tonic::Status>;
        /// Server streaming response type for the QueryRecordBatch method.
        type QueryRecordBatchStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::BatchBytesResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn query_record_batch(
            &self,
            request: tonic::Request<super::QueryRecordBatchRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::QueryRecordBatchStream>,
            tonic::Status,
        >;
        async fn raft_write(
            &self,
            request: tonic::Request<super::RaftWriteCommand>,
        ) -> std::result::Result<
            tonic::Response<super::BatchBytesResponse>,
            tonic::Status,
        >;
        async fn admin_request(
            &self,
            request: tonic::Request<super::AdminCommand>,
        ) -> std::result::Result<
            tonic::Response<super::BatchBytesResponse>,
            tonic::Status,
        >;
    }
    /// --------------------------------------------------------------------
    #[derive(Debug)]
    pub struct TskvServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> TskvServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TskvServiceServer<T>
    where
        T: TskvService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/kv_service.TSKVService/Ping" => {
                    #[allow(non_camel_case_types)]
                    struct PingSvc<T: TskvService>(pub Arc<T>);
                    impl<T: TskvService> tonic::server::UnaryService<super::PingRequest>
                    for PingSvc<T> {
                        type Response = super::PingResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TskvService>::ping(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/kv_service.TSKVService/DownloadFile" => {
                    #[allow(non_camel_case_types)]
                    struct DownloadFileSvc<T: TskvService>(pub Arc<T>);
                    impl<
                        T: TskvService,
                    > tonic::server::ServerStreamingService<super::DownloadFileRequest>
                    for DownloadFileSvc<T> {
                        type Response = super::BatchBytesResponse;
                        type ResponseStream = T::DownloadFileStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DownloadFileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TskvService>::download_file(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DownloadFileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/kv_service.TSKVService/TagScan" => {
                    #[allow(non_camel_case_types)]
                    struct TagScanSvc<T: TskvService>(pub Arc<T>);
                    impl<
                        T: TskvService,
                    > tonic::server::ServerStreamingService<
                        super::QueryRecordBatchRequest,
                    > for TagScanSvc<T> {
                        type Response = super::BatchBytesResponse;
                        type ResponseStream = T::TagScanStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryRecordBatchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TskvService>::tag_scan(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TagScanSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/kv_service.TSKVService/QueryRecordBatch" => {
                    #[allow(non_camel_case_types)]
                    struct QueryRecordBatchSvc<T: TskvService>(pub Arc<T>);
                    impl<
                        T: TskvService,
                    > tonic::server::ServerStreamingService<
                        super::QueryRecordBatchRequest,
                    > for QueryRecordBatchSvc<T> {
                        type Response = super::BatchBytesResponse;
                        type ResponseStream = T::QueryRecordBatchStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryRecordBatchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TskvService>::query_record_batch(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryRecordBatchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/kv_service.TSKVService/RaftWrite" => {
                    #[allow(non_camel_case_types)]
                    struct RaftWriteSvc<T: TskvService>(pub Arc<T>);
                    impl<
                        T: TskvService,
                    > tonic::server::UnaryService<super::RaftWriteCommand>
                    for RaftWriteSvc<T> {
                        type Response = super::BatchBytesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RaftWriteCommand>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TskvService>::raft_write(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RaftWriteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/kv_service.TSKVService/AdminRequest" => {
                    #[allow(non_camel_case_types)]
                    struct AdminRequestSvc<T: TskvService>(pub Arc<T>);
                    impl<T: TskvService> tonic::server::UnaryService<super::AdminCommand>
                    for AdminRequestSvc<T> {
                        type Response = super::BatchBytesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AdminCommand>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TskvService>::admin_request(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AdminRequestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for TskvServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "kv_service.TSKVService";
    impl<T> tonic::server::NamedService for TskvServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
