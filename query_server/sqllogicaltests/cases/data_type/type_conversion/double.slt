# normal
sleep 100ms
# test_double_db.test(time timestamp(ns), ta string, tb string, fa double, fb double)
statement ok
drop database if exists test_double_db;

statement ok
create database test_double_db;

statement ok
alter database test_double_db set ttl '1000000d';

statement ok
--#DATABASE = test_double_db

statement ok
--#LP_BEGIN
test_double_conv,ta=a1,tb=b1 fa=1,fb=2 3
--#LP_END


statement ok
--#LP_BEGIN
test_double_conv,ta=a1,tb=b1 fa=1,fb=2 1667456411000000000
--#LP_END


# binary
#-- utf8 to float64
query 
explain
select time
from test_double_conv
where fa = '12345678865';
----
"logical_plan"
"Projection: test_double_conv.time
--TableScan: test_double_conv projection=[time, fa], full_filters=[CAST(test_double_conv.fa AS Utf8) = Utf8(\"12345678865\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
 --TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Exactly }: Range { low: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Exactly }, high: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Exactly } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) = 12345678865\"), split_num=2, projection=[time,fa]
"


query 
explain
select time
from test_double_conv
where fa <> '12345678865';
----
"logical_plan"
"Projection: test_double_conv.time
--Filter: CAST(test_double_conv.fa AS Utf8) != Utf8(\"12345678865\")
----TableScan: test_double_conv projection=[time, fa], partial_filters=[CAST(test_double_conv.fa AS Utf8) != Utf8(\"12345678865\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--CoalesceBatchesExec: target_batch_size=8192
----FilterExec: CAST(fa@1 AS Utf8) != 12345678865
------RepartitionExec: partitioning=RoundRobinBatch(8), input_partitions=2
 --------TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: None, bound: Above }: Range { low: Marker { data_type: Utf8, value: None, bound: Above }, high: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Below } }, Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Above }: Range { low: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Above }, high: Marker { data_type: Utf8, value: None, bound: Below } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) != 12345678865\"), split_num=2, projection=[time,fa]
"


query 
explain
select time
from test_double_conv
where fa != '12345678865';
----
"logical_plan"
"Projection: test_double_conv.time
--Filter: CAST(test_double_conv.fa AS Utf8) != Utf8(\"12345678865\")
----TableScan: test_double_conv projection=[time, fa], partial_filters=[CAST(test_double_conv.fa AS Utf8) != Utf8(\"12345678865\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--CoalesceBatchesExec: target_batch_size=8192
----FilterExec: CAST(fa@1 AS Utf8) != 12345678865
------RepartitionExec: partitioning=RoundRobinBatch(8), input_partitions=2
 --------TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: None, bound: Above }: Range { low: Marker { data_type: Utf8, value: None, bound: Above }, high: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Below } }, Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Above }: Range { low: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Above }, high: Marker { data_type: Utf8, value: None, bound: Below } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) != 12345678865\"), split_num=2, projection=[time,fa]
"


query 
explain
select time
from test_double_conv
where fa < '12345678865';
----
"logical_plan"
"Projection: test_double_conv.time
--TableScan: test_double_conv projection=[time, fa], full_filters=[CAST(test_double_conv.fa AS Utf8) < Utf8(\"12345678865\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: None, bound: Above }: Range { low: Marker { data_type: Utf8, value: None, bound: Above }, high: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Below } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) < 12345678865\"), split_num=2, projection=[time,fa]
"


query 
explain
select time
from test_double_conv
where fa <= '12345678865';
----
"logical_plan"
"Projection: test_double_conv.time
--TableScan: test_double_conv projection=[time, fa], full_filters=[CAST(test_double_conv.fa AS Utf8) <= Utf8(\"12345678865\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: None, bound: Above }: Range { low: Marker { data_type: Utf8, value: None, bound: Above }, high: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Exactly } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) <= 12345678865\"), split_num=2, projection=[time,fa]
"


query 
explain
select time
from test_double_conv
where fa > '12345678865';
----
"logical_plan"
"Projection: test_double_conv.time
--TableScan: test_double_conv projection=[time, fa], full_filters=[CAST(test_double_conv.fa AS Utf8) > Utf8(\"12345678865\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Above }: Range { low: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Above }, high: Marker { data_type: Utf8, value: None, bound: Below } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) > 12345678865\"), split_num=2, projection=[time,fa]
"


query 
explain
select time
from test_double_conv
where fa >= '12345678865';
----
"logical_plan"
"Projection: test_double_conv.time
--TableScan: test_double_conv projection=[time, fa], full_filters=[CAST(test_double_conv.fa AS Utf8) >= Utf8(\"12345678865\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Exactly }: Range { low: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Exactly }, high: Marker { data_type: Utf8, value: None, bound: Below } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) >= 12345678865\"), split_num=2, projection=[time,fa]
"


query 
explain
select time
from test_double_conv
where fa >= '12345678865';
----
"logical_plan"
"Projection: test_double_conv.time
--TableScan: test_double_conv projection=[time, fa], full_filters=[CAST(test_double_conv.fa AS Utf8) >= Utf8(\"12345678865\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Exactly }: Range { low: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Exactly }, high: Marker { data_type: Utf8, value: None, bound: Below } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) >= 12345678865\"), split_num=2, projection=[time,fa]
"


#-- error start
query 
explain
select time
from test_double_conv
where fa >= '1997-01-31';
----
"logical_plan"
"Projection: test_double_conv.time
--TableScan: test_double_conv projection=[time, fa], full_filters=[CAST(test_double_conv.fa AS Utf8) >= Utf8(\"1997-01-31\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: Some(Utf8(\"1997-01-31\")), bound: Exactly }: Range { low: Marker { data_type: Utf8, value: Some(Utf8(\"1997-01-31\")), bound: Exactly }, high: Marker { data_type: Utf8, value: None, bound: Below } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) >= 1997-01-31\"), split_num=2, projection=[time,fa]
"


query 
explain
select time
from test_double_conv
where fa >= 'xxx';
----
"logical_plan"
"Projection: test_double_conv.time
--TableScan: test_double_conv projection=[time, fa], full_filters=[CAST(test_double_conv.fa AS Utf8) >= Utf8(\"xxx\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: Some(Utf8(\"xxx\")), bound: Exactly }: Range { low: Marker { data_type: Utf8, value: Some(Utf8(\"xxx\")), bound: Exactly }, high: Marker { data_type: Utf8, value: None, bound: Below } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) >= xxx\"), split_num=2, projection=[time,fa]
"

#-- error end

# between and
#-- normal
query 
explain
select time
from test_double_conv
where fa between '12345678865' and 12345678869;
----
"logical_plan"
"Projection: test_double_conv.time
--TableScan: test_double_conv projection=[time, fa], full_filters=[CAST(test_double_conv.fa AS Utf8) >= Utf8(\"12345678865\"), CAST(test_double_conv.fa AS Utf8) <= Utf8(\"12345678869\")], partial_filters=[CAST(test_double_conv.fa AS Utf8) AS test_double_conv.fa >= Utf8(\"12345678865\"), CAST(test_double_conv.fa AS Utf8) AS test_double_conv.fa <= Utf8(\"12345678869\")]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Exactly }: Range { low: Marker { data_type: Utf8, value: Some(Utf8(\"12345678865\")), bound: Exactly }, high: Marker { data_type: Utf8, value: Some(Utf8(\"12345678869\")), bound: Exactly } }} })}) }, filter=Some(\"CAST(fa@1 AS Utf8) >= 12345678865 AND CAST(fa@1 AS Utf8) <= 12345678869 AND CAST(fa@1 AS Utf8) >= 12345678865 AND CAST(fa@1 AS Utf8) <= 12345678869\"), split_num=2, projection=[time,fa]
"


query 
explain
select time
from test_double_conv
where fa between 12345678865 and 12345678869;
----
"logical_plan"
"Projection: test_double_conv.time
--TableScan: test_double_conv projection=[time, fa], full_filters=[test_double_conv.fa >= Float64(12345678865), test_double_conv.fa <= Float64(12345678869)]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({Column { relation: None, name: \"fa\" }: Range(RangeValueSet { low_indexed_ranges: {Marker { data_type: Float64, value: Some(Float64(12345678865)), bound: Exactly }: Range { low: Marker { data_type: Float64, value: Some(Float64(12345678865)), bound: Exactly }, high: Marker { data_type: Float64, value: Some(Float64(12345678869)), bound: Exactly } }} })}) }, filter=Some(\"fa@1 >= 12345678865 AND fa@1 <= 12345678869\"), split_num=2, projection=[time,fa]
"


#-- error start
query 
explain
select time
from test_double_conv
where fa between 12345678865 and 'xxx';
----

#-- error end

# in list
query 
explain
select time
from test_double_conv
where fa in (12345678865, '12345678869');
----
"logical_plan"
"Projection: test_double_conv.time
--Filter: CAST(test_double_conv.fa AS Utf8) IN ([Utf8(\"12345678865\"), Utf8(\"12345678869\")])
----TableScan: test_double_conv projection=[time, fa], partial_filters=[CAST(test_double_conv.fa AS Utf8) IN ([Utf8(\"12345678865\"), Utf8(\"12345678869\")])]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--CoalesceBatchesExec: target_batch_size=8192
----FilterExec: Use CAST(fa@1 AS Utf8) IN (SET) ([Literal { value: Utf8(\"12345678865\") }, Literal { value: Utf8(\"12345678869\") }])
------RepartitionExec: partitioning=RoundRobinBatch(8), input_partitions=2
--------TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, filter=Some(\"Use CAST(fa@1 AS Utf8) IN (SET) ([Literal { value: Utf8(\\"12345678865\\") }, Literal { value: Utf8(\\"12345678869\\") }])\"), split_num=2, projection=[time,fa]
"


#-- error start
query 
explain
select time
from test_double_conv
where fa in (12345678865, 'xx');
----
"logical_plan"
"Projection: test_double_conv.time
--Filter: CAST(test_double_conv.fa AS Utf8) IN ([Utf8(\"12345678865\"), Utf8(\"xx\")])
----TableScan: test_double_conv projection=[time, fa], partial_filters=[CAST(test_double_conv.fa AS Utf8) IN ([Utf8(\"12345678865\"), Utf8(\"xx\")])]"
"physical_plan"
"ProjectionExec: expr=[time@0 as time]
--CoalesceBatchesExec: target_batch_size=8192
----FilterExec: Use CAST(fa@1 AS Utf8) IN (SET) ([Literal { value: Utf8(\"12345678865\") }, Literal { value: Utf8(\"xx\") }])
------RepartitionExec: partitioning=RoundRobinBatch(8), input_partitions=2
--------TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, filter=Some(\"Use CAST(fa@1 AS Utf8) IN (SET) ([Literal { value: Utf8(\\"12345678865\\") }, Literal { value: Utf8(\\"xx\\") }])\"), split_num=2, projection=[time,fa]
"

#-- error end

# issue: https://github.com/apache/arrow-datafusion/issues/6001
query 
explain select sum(case when fa < 50 then fa else 0 end)
    over (partition by ta) from test_double_conv;
----
"logical_plan"
"Projection: SUM(CASE WHEN test_double_conv.fa < Int64(50) THEN test_double_conv.fa ELSE Int64(0) END) PARTITION BY [test_double_conv.ta] ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
--WindowAggr: windowExpr=[[SUM(CASE WHEN test_double_conv.fa < Float64(50) THEN test_double_conv.fa ELSE Float64(0) END) PARTITION BY [test_double_conv.ta] ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING AS SUM(CASE WHEN test_double_conv.fa < Int64(50) THEN test_double_conv.fa ELSE Int64(0) END) PARTITION BY [test_double_conv.ta] ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING]]
----Projection: test_double_conv.ta, test_double_conv.fa
------TableScan: test_double_conv projection=[time, ta, fa]"
"physical_plan"
"ProjectionExec: expr=[SUM(CASE WHEN test_double_conv.fa < Int64(50) THEN test_double_conv.fa ELSE Int64(0) END) PARTITION BY [test_double_conv.ta] ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING@2 as SUM(CASE WHEN test_double_conv.fa < Int64(50) THEN test_double_conv.fa ELSE Int64(0) END) PARTITION BY [test_double_conv.ta] ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING]
--WindowAggExec: wdw=[SUM(CASE WHEN test_double_conv.fa < Int64(50) THEN test_double_conv.fa ELSE Int64(0) END) PARTITION BY [test_double_conv.ta] ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING: Ok(Field { name: \"SUM(CASE WHEN test_double_conv.fa < Int64(50) THEN test_double_conv.fa ELSE Int64(0) END) PARTITION BY [test_double_conv.ta] ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }), frame: WindowFrame { units: Rows, start_bound: Preceding(UInt64(NULL)), end_bound: Following(UInt64(NULL)) }]
----SortExec: expr=[ta@0 ASC NULLS LAST]
------CoalesceBatchesExec: target_batch_size=8192
--------RepartitionExec: partitioning=Hash([ta@0], 8), input_partitions=8
----------RepartitionExec: partitioning=RoundRobinBatch(8), input_partitions=2
------------ProjectionExec: expr=[ta@1 as ta, fa@2 as fa]
--------------TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, filter=None, split_num=2, projection=[time,ta,fa]
"
